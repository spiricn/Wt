#version 130

#pragma include noise3D.glsl

// Inputs
in float inType;
in vec3 inPosition;
in float inLife;
in vec3 inVelocity;
in float inSize;
in float inMaxLife;

// Fragment shader output
out vec4 fsColor;

// Uniforms
uniform vec3 uCamPos;
uniform mat4 uModelMat;
uniform mat4 uModelViewMat;
uniform mat4 uProjMat;
uniform float uSizeGrow;
uniform int uWorldSpaceSim;

// TODO get this as a uniform ?
#define MAX_COLOR_ANIMATION 4

uniform vec4 uColorAnimation[MAX_COLOR_ANIMATION];

void main(){
	// Particle life factor (ranges from 0 to 1 as the particle grows older)
	float a = (inMaxLife-inLife) / (inMaxLife );

	vec3 worldPos;

	if(uWorldSpaceSim == 1){
		worldPos = inPosition;
	}
	else{
		worldPos = (uModelMat*vec4(inPosition, 1.0)).xyz;
	}
	
	// Animate particle size
	// TODO do the projection dynamically
	gl_PointSize = ( inSize  + a*uSizeGrow*inSize) * ( 1280/length(uCamPos.xyz-worldPos) );

	// Animate particle color

	// Time delta between each color of the animation
	float dt = 1.0 / ( MAX_COLOR_ANIMATION - 1);

	// Since the delta is fixed, starting color index can be calculated
	int keyIdx = int(floor(a/dt));

	// Interpolate between the current and the next color
	fsColor = mix(uColorAnimation[keyIdx], uColorAnimation[ (keyIdx+1) % MAX_COLOR_ANIMATION], (a-(keyIdx*dt)) / dt);

	// Final particle position
	if(uWorldSpaceSim == 1){
		gl_Position = (uProjMat*uModelViewMat) * vec4(inPosition, 1.0);
	}
	else{
		gl_Position = (uProjMat*(uModelViewMat*uModelMat)) * vec4(inPosition, 1.0);
	}
}