#version 330

#define DISABLE(x) (x*0.00000000000000000000000000000001)

#define eNORMAL_PASS 0
#define eGODRAY_PASS 1
#define eSHADOW_PASS 2

in vec4 inVertex;
in vec2 inTexCoord;
in vec3 inNormals;
in vec4 inBoneIds;
in vec4 inWeights;
in vec3 inTangent;

out vec2 fsTexCoords;
out vec3 fsNormal;
out vec3 fsWorldPos;
out vec3 fsEyePos;
out vec3 fsTangent;

const int MAX_BONES = 200;

uniform mat4x4 uModelMat;
uniform mat4x4 uProjMat;
uniform mat4x4 uViewMat;
uniform mat4x4 uBones[MAX_BONES];
uniform int uPassType;

//#define SKIN_DISABLE

void main(void) {
	
	mat4x4 modelViewMat = uViewMat * uModelMat;
	mat4x4 modelViewProjMat = uProjMat * modelViewMat;

	if(uPassType == eNORMAL_PASS){
		// vertex normal
		fsNormal = (uModelMat * vec4(inNormals, 0.0)).xyz;
	}

	// vertex position
	vec4 pos = inVertex;

	// is the vertex bound to some bones?
#ifdef SKIN_DISABLE
	if(int(inBoneIds[0]) == 13099){
#else
	if(int(inBoneIds[0]) != MAX_BONES){
#endif

		mat4x4 boneTransform = mat4(0.0f);

		// generate bone transformation matrix
		for(int i=0; i<4; i++){
			int boneIndex = int( inBoneIds[i] );

			if(boneIndex == MAX_BONES){
				// no more bones
				break;
			}
			else{
				boneTransform += ( uBones[ boneIndex ] * inWeights[i] );
			}
		}

		// animate vertex
		pos = boneTransform*pos;

		if(uPassType == eNORMAL_PASS){
			fsNormal = (boneTransform*vec4(fsNormal, 0.0)).xyz;
		}
	}

	if(uPassType == eNORMAL_PASS){
		fsTexCoords = inTexCoord.st;
		fsTangent = (uModelMat * vec4(inTangent.xyz, 1.0)).xyz;
		fsWorldPos = (uModelMat * vec4(pos.xyz, 1.0)).xyz;
	}

	// final vertex position output
    gl_Position = modelViewProjMat * pos;
}